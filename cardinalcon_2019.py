# -*- coding: utf-8 -*-
"""CardinalCon 2019.ipynb

Automatically generated by Colaboratory.

# Data Pre-Processing and Cleaning

Importing Libraries
"""

# imports
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
import decimal
from IPython.display import Image, HTML
def path_to_image_html(path):
    return '<img src="'+ path + '"/>'

print(os.listdir('./'))

df = pd.read_csv("./data.csv")

"""Setting display options for our table output"""

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 100)
pd.set_option('max_colwidth', 1000)
pd.set_option('display.width', 10000)

"""Our data set in its initial state"""

df.head()

"""We investigated the column names with acronyms and discovered that they were player positions. We updated the column names to be more descriptive."""

df = df.rename(columns={'LS' : 'Left Striker', 'ST' : 'Striker', 'RS': 'Right Striker', 'LW' : 'Left Winger', 'LF' : 'Left Forward', 'CF' : 'Center Forward', 'RF' : 'Right Forward', 'RW' : 'Right Winger', 'LAM' : 'Left Attacking Midfielder', 'CAM' : 'Center Attacking Midfielder', 'RAM' : 'Right Attacking Midfielder', 'LM' : 'Left Midfielder', 'LCM' : 'Left Center Midfielder', 'CM' : 'Center Midfielder', 'RCM' : 'Right Center Midfielder', 'RM' : 'Right Midfielder', 'LWB' : 'Left Wing Back', 'LDM' : 'Left Defensive Midfielder', 'CDM' : 'Center Defensive Midfielder', 'RDM' : 'Right Defensive Midfielder', 'RWB' : 'Right Wing Back', 'LB' : 'Left Back', 'LCB' : 'Left Center Back', 'CB' : 'Center Back', 'RCB' : 'Right Center Back', 'RB' : 'Right Back' });
df.head()

"""We figured out based on the Sofifa website (where our data was scraped from) that the "Special" column was a Total Stats field, calculated with all player stats excluding Composure. The prints below demonstrate this."""

TotalStats = []
Special = []
for index, row in df.iterrows():
  Special.append(row.Special);
  TotalStats.append(row.Crossing + row.Finishing + row.HeadingAccuracy + row.ShortPassing + row.Volleys + row.Dribbling + row.Curve + row.FKAccuracy + row.LongPassing + row.BallControl + row.Acceleration + row.SprintSpeed + row.Agility + row.Reactions + row.Balance + row.ShotPower + row.Jumping + row.Stamina + row.Strength + row.LongShots + row.Aggression + row.Interceptions + row.Positioning + row.Vision + row.Penalties + row.Marking + row.StandingTackle + row.SlidingTackle + row.GKDiving + row.GKHandling + row.GKKicking + row.GKPositioning + row.GKReflexes)
print("Total Stats (Without Composure):")
print(TotalStats)
print("Special:")
print(Special)

"""We rename the Special column to be indicative of its actual values."""

df = df.rename(columns={'Special' : 'Total Stats'})

"""Now that we have our data identified, we're looking to clean the data - we're starting by checking what information we have null values in."""

df.isnull().sum()

"""A lot of our variables have 48 nulls, and are mostly various player statistics. Here we confirm the overlap between these rows."""

df.loc[df.Crossing.isnull()]

df.describe()

"""Because we have access to Total Stats in the rows that are missing player statistics, we're filling these data value by finding the average contribution of each stat to the player's total - then multiplying that percentage by their total to derive our predicted value for that data cell to fill the data."""

CroMult = df["Crossing"].mean()/df["Total Stats"].mean()
print("Crossing multiplier is: ", CroMult)
df["Crossing"].fillna(CroMult * df["Total Stats"] , inplace = True)
df["Crossing"] = pd.to_numeric(df["Crossing"])
FinMult = df["Finishing"].mean()/df["Total Stats"].mean()
print("Finishing multiplier is: ", FinMult)
df["Finishing"].fillna(FinMult * df["Total Stats"] , inplace = True)
df["Finishing"] = pd.to_numeric(df["Finishing"])
HeaMult = df["HeadingAccuracy"].mean()/df["Total Stats"].mean()
print("HeadingAccuracy multiplier is: ", HeaMult)
df["HeadingAccuracy"].fillna(HeaMult * df["Total Stats"] , inplace = True)
df["HeadingAccuracy"] = pd.to_numeric(df["HeadingAccuracy"])
ShoMult = df["ShortPassing"].mean()/df["Total Stats"].mean()
print("ShortPassing multiplier is: ", ShoMult)
df["ShortPassing"].fillna(ShoMult * df["Total Stats"] , inplace = True)
df["ShortPassing"] = pd.to_numeric(df["ShortPassing"])
VolMult = df["Volleys"].mean()/df["Total Stats"].mean()
print("Volleys multiplier is: ", VolMult)
df["Volleys"].fillna(VolMult * df["Total Stats"] , inplace = True)
df["Volleys"] = pd.to_numeric(df["Volleys"])
DriMult = df["Dribbling"].mean()/df["Total Stats"].mean()
print("Dribbling multiplier is: ", DriMult)
df["Dribbling"].fillna(DriMult * df["Total Stats"] , inplace = True)
df["Dribbling"] = pd.to_numeric(df["Dribbling"])
CurMult = df["Curve"].mean()/df["Total Stats"].mean()
print("Curve multiplier is: ", CurMult)
df["Curve"].fillna(CurMult * df["Total Stats"] , inplace = True)
df["Curve"] = pd.to_numeric(df["Curve"])
FKAMult = df["FKAccuracy"].mean()/df["Total Stats"].mean()
print("FKAccuracy multiplier is: ", FKAMult)
df["FKAccuracy"].fillna(FKAMult * df["Total Stats"] , inplace = True)
df["FKAccuracy"] = pd.to_numeric(df["FKAccuracy"])
LonMult = df["LongPassing"].mean()/df["Total Stats"].mean()
print("LongPassing multiplier is: ", LonMult)
df["LongPassing"].fillna(LonMult * df["Total Stats"] , inplace = True)
df["LongPassing"] = pd.to_numeric(df["LongPassing"])
BalMult = df["BallControl"].mean()/df["Total Stats"].mean()
print("BallControl multiplier is: ", BalMult)
df["BallControl"].fillna(BalMult * df["Total Stats"] , inplace = True)
df["BallControl"] = pd.to_numeric(df["BallControl"])
AccMult = df["Acceleration"].mean()/df["Total Stats"].mean()
print("Acceleration multiplier is: ", AccMult)
df["Acceleration"].fillna(AccMult * df["Total Stats"] , inplace = True)
df["Acceleration"] = pd.to_numeric(df["Acceleration"])
SprMult = df["SprintSpeed"].mean()/df["Total Stats"].mean()
print("SprintSpeed multiplier is: ", SprMult)
df["SprintSpeed"].fillna(SprMult * df["Total Stats"] , inplace = True)
df["SprintSpeed"] = pd.to_numeric(df["SprintSpeed"])
AgiMult = df["Agility"].mean()/df["Total Stats"].mean()
print("Agility multiplier is: ", AgiMult)
df["Agility"].fillna(AgiMult * df["Total Stats"] , inplace = True)
df["Agility"] = pd.to_numeric(df["Agility"])
ReaMult = df["Reactions"].mean()/df["Total Stats"].mean()
print("Reactions multiplier is: ", ReaMult)
df["Reactions"].fillna(ReaMult * df["Total Stats"] , inplace = True)
df["Reactions"] = pd.to_numeric(df["Reactions"])
BalMult = df["Balance"].mean()/df["Total Stats"].mean()
print("Balance multiplier is: ", BalMult)
df["Balance"].fillna(BalMult * df["Total Stats"] , inplace = True)
df["Balance"] = pd.to_numeric(df["Balance"])
ShoMult = df["ShotPower"].mean()/df["Total Stats"].mean()
print("ShotPower multiplier is: ", ShoMult)
df["ShotPower"].fillna(ShoMult * df["Total Stats"] , inplace = True)
df["ShotPower"] = pd.to_numeric(df["ShotPower"])
JumMult = df["Jumping"].mean()/df["Total Stats"].mean()
print("Jumping multiplier is: ", JumMult)
df["Jumping"].fillna(JumMult * df["Total Stats"] , inplace = True)
df["Jumping"] = pd.to_numeric(df["Jumping"])
StaMult = df["Stamina"].mean()/df["Total Stats"].mean()
print("Stamina multiplier is: ", StaMult)
df["Stamina"].fillna(StaMult * df["Total Stats"] , inplace = True)
df["Stamina"] = pd.to_numeric(df["Stamina"])
StrMult = df["Strength"].mean()/df["Total Stats"].mean()
print("Strength multiplier is: ", StrMult)
df["Strength"].fillna(StrMult * df["Total Stats"] , inplace = True)
df["Strength"] = pd.to_numeric(df["Strength"])
LonMult = df["LongShots"].mean()/df["Total Stats"].mean()
print("LongShots multiplier is: ", LonMult)
df["LongShots"].fillna(LonMult * df["Total Stats"] , inplace = True)
df["LongShots"] = pd.to_numeric(df["LongShots"])
AggMult = df["Aggression"].mean()/df["Total Stats"].mean()
print("Aggression multiplier is: ", AggMult)
df["Aggression"].fillna(AggMult * df["Total Stats"] , inplace = True)
df["Aggression"] = pd.to_numeric(df["Aggression"])
IntMult = df["Interceptions"].mean()/df["Total Stats"].mean()
print("Interceptions multiplier is: ", IntMult)
df["Interceptions"].fillna(IntMult * df["Total Stats"] , inplace = True)
df["Interceptions"] = pd.to_numeric(df["Interceptions"])
PosMult = df["Positioning"].mean()/df["Total Stats"].mean()
print("Positioning multiplier is: ", PosMult)
df["Positioning"].fillna(PosMult * df["Total Stats"] , inplace = True)
df["Positioning"] = pd.to_numeric(df["Positioning"])
VisMult = df["Vision"].mean()/df["Total Stats"].mean()
print("Vision multiplier is: ", VisMult)
df["Vision"].fillna(VisMult * df["Total Stats"] , inplace = True)
df["Vision"] = pd.to_numeric(df["Vision"])
PenMult = df["Penalties"].mean()/df["Total Stats"].mean()
print("Penalties multiplier is: ", PenMult)
df["Penalties"].fillna(PenMult * df["Total Stats"] , inplace = True)
df["Penalties"] = pd.to_numeric(df["Penalties"])
MarMult = df["Marking"].mean()/df["Total Stats"].mean()
print("Marking multiplier is: ", MarMult)
df["Marking"].fillna(MarMult * df["Total Stats"] , inplace = True)
df["Marking"] = pd.to_numeric(df["Marking"])
StaMult = df["StandingTackle"].mean()/df["Total Stats"].mean()
print("StandingTackle multiplier is: ", StaMult)
df["StandingTackle"].fillna(StaMult * df["Total Stats"] , inplace = True)
df["StandingTackle"] = pd.to_numeric(df["StandingTackle"])
SliMult = df["SlidingTackle"].mean()/df["Total Stats"].mean()
print("SlidingTackle multiplier is: ", SliMult)
df["SlidingTackle"].fillna(SliMult * df["Total Stats"] , inplace = True)
df["SlidingTackle"] = pd.to_numeric(df["SlidingTackle"])
GKDMult = df["GKDiving"].mean()/df["Total Stats"].mean()
print("GKDiving multiplier is: ", GKDMult)
df["GKDiving"].fillna(GKDMult * df["Total Stats"] , inplace = True)
df["GKDiving"] = pd.to_numeric(df["GKDiving"])
GKHMult = df["GKHandling"].mean()/df["Total Stats"].mean()
print("GKHandling multiplier is: ", GKHMult)
df["GKHandling"].fillna(GKHMult * df["Total Stats"] , inplace = True)
df["GKHandling"] = pd.to_numeric(df["GKHandling"])
GKKMult = df["GKKicking"].mean()/df["Total Stats"].mean()
print("GKKicking multiplier is: ", GKKMult)
df["GKKicking"].fillna(GKKMult * df["Total Stats"] , inplace = True)
df["GKKicking"] = pd.to_numeric(df["GKKicking"])
GKPMult = df["GKPositioning"].mean()/df["Total Stats"].mean()
print("GKPositioning multiplier is: ", GKPMult)
df["GKPositioning"].fillna(GKPMult * df["Total Stats"] , inplace = True)
df["GKPositioning"] = pd.to_numeric(df["GKPositioning"])
GKRMult = df["GKReflexes"].mean()/df["Total Stats"].mean()
print("GKReflexes multiplier is: ", GKRMult)
df["GKReflexes"].fillna(GKRMult * df["Total Stats"] , inplace = True)
df["GKReflexes"] = pd.to_numeric(df["GKReflexes"])

"""We've filled the data cells using our method of average multiplier times total score, we're validating the data is filled here."""

df.isnull().sum()

"""The player position stats are currently a string of a score plus some modifier across each of their stats. We're going to extract the additional modifier into a new column, remove it from the original columns, and have everything become numeric data for modeling purposes."""

# generate the stats addition first, then for each one that has it, remove it from each column
df["Stats Addtion"] = df[df["Left Striker"].str.contains('\d+\+\d').notnull()]["Left Striker"].str.slice(3)
df["Stats Addtion"] = pd.to_numeric(df["Stats Addtion"])

df["Left Striker"] = df[df["Left Striker"].str.contains('\d+\+\d').notnull()]["Left Striker"].str.slice(0, 2)
df["Left Striker"] = pd.to_numeric(df["Left Striker"])
df["Striker"] = df[df["Striker"].str.contains('\d+\+\d').notnull()]["Striker"].str.slice(0, 2)
df["Striker"] = pd.to_numeric(df["Striker"])
df["Right Striker"] = df[df["Right Striker"].str.contains('\d+\+\d').notnull()]["Right Striker"].str.slice(0, 2)
df["Right Striker"] = pd.to_numeric(df["Right Striker"])
df["Left Winger"] = df[df["Left Winger"].str.contains('\d+\+\d').notnull()]["Left Winger"].str.slice(0, 2)
df["Left Winger"] = pd.to_numeric(df["Left Winger"])
df["Left Forward"] = df[df["Left Forward"].str.contains('\d+\+\d').notnull()]["Left Forward"].str.slice(0, 2)
df["Left Forward"] = pd.to_numeric(df["Left Forward"])
df["Center Forward"] = df[df["Center Forward"].str.contains('\d+\+\d').notnull()]["Center Forward"].str.slice(0, 2)
df["Center Forward"] = pd.to_numeric(df["Center Forward"])
df["Right Forward"] = df[df["Right Forward"].str.contains('\d+\+\d').notnull()]["Right Forward"].str.slice(0, 2)
df["Right Forward"] = pd.to_numeric(df["Right Forward"])
df["Right Winger"] = df[df["Right Winger"].str.contains('\d+\+\d').notnull()]["Right Winger"].str.slice(0, 2)
df["Right Winger"] = pd.to_numeric(df["Right Winger"])
df["Left Attacking Midfielder"] = df[df["Left Attacking Midfielder"].str.contains('\d+\+\d').notnull()]["Left Attacking Midfielder"].str.slice(0, 2)
df["Left Attacking Midfielder"] = pd.to_numeric(df["Left Attacking Midfielder"])
df["Center Attacking Midfielder"] = df[df["Center Attacking Midfielder"].str.contains('\d+\+\d').notnull()]["Center Attacking Midfielder"].str.slice(0, 2)
df["Center Attacking Midfielder"] = pd.to_numeric(df["Center Attacking Midfielder"])
df["Right Attacking Midfielder"] = df[df["Right Attacking Midfielder"].str.contains('\d+\+\d').notnull()]["Right Attacking Midfielder"].str.slice(0, 2)
df["Right Attacking Midfielder"] = pd.to_numeric(df["Right Attacking Midfielder"])
df["Left Midfielder"] = df[df["Left Midfielder"].str.contains('\d+\+\d').notnull()]["Left Midfielder"].str.slice(0, 2)
df["Left Midfielder"] = pd.to_numeric(df["Left Midfielder"])
df["Left Center Midfielder"] = df[df["Left Center Midfielder"].str.contains('\d+\+\d').notnull()]["Left Center Midfielder"].str.slice(0, 2)
df["Left Center Midfielder"] = pd.to_numeric(df["Left Center Midfielder"])
df["Center Midfielder"] = df[df["Center Midfielder"].str.contains('\d+\+\d').notnull()]["Center Midfielder"].str.slice(0, 2)
df["Center Midfielder"] = pd.to_numeric(df["Center Midfielder"])
df["Right Center Midfielder"] = df[df["Right Center Midfielder"].str.contains('\d+\+\d').notnull()]["Right Center Midfielder"].str.slice(0, 2)
df["Right Center Midfielder"] = pd.to_numeric(df["Right Center Midfielder"])
df["Right Midfielder"] = df[df["Right Midfielder"].str.contains('\d+\+\d').notnull()]["Right Midfielder"].str.slice(0, 2)
df["Right Midfielder"] = pd.to_numeric(df["Right Midfielder"])
df["Left Wing Back"] = df[df["Left Wing Back"].str.contains('\d+\+\d').notnull()]["Left Wing Back"].str.slice(0, 2)
df["Left Wing Back"] = pd.to_numeric(df["Left Wing Back"])
df["Left Defensive Midfielder"] = df[df["Left Defensive Midfielder"].str.contains('\d+\+\d').notnull()]["Left Defensive Midfielder"].str.slice(0, 2)
df["Left Defensive Midfielder"] = pd.to_numeric(df["Left Defensive Midfielder"])
df["Center Defensive Midfielder"] = df[df["Center Defensive Midfielder"].str.contains('\d+\+\d').notnull()]["Center Defensive Midfielder"].str.slice(0, 2)
df["Center Defensive Midfielder"] = pd.to_numeric(df["Center Defensive Midfielder"])
df["Right Defensive Midfielder"] = df[df["Right Defensive Midfielder"].str.contains('\d+\+\d').notnull()]["Right Defensive Midfielder"].str.slice(0, 2)
df["Right Defensive Midfielder"] = pd.to_numeric(df["Right Defensive Midfielder"])
df["Right Wing Back"] = df[df["Right Wing Back"].str.contains('\d+\+\d').notnull()]["Right Wing Back"].str.slice(0, 2)
df["Right Wing Back"] = pd.to_numeric(df["Right Wing Back"])
df["Left Back"] = df[df["Left Back"].str.contains('\d+\+\d').notnull()]["Left Back"].str.slice(0, 2)
df["Left Back"] = pd.to_numeric(df["Left Back"])
df["Left Center Back"] = df[df["Left Center Back"].str.contains('\d+\+\d').notnull()]["Left Center Back"].str.slice(0, 2)
df["Left Center Back"] = pd.to_numeric(df["Left Center Back"])
df["Center Back"] = df[df["Center Back"].str.contains('\d+\+\d').notnull()]["Center Back"].str.slice(0, 2)
df["Center Back"] = pd.to_numeric(df["Center Back"])
df["Right Center Back"] = df[df["Right Center Back"].str.contains('\d+\+\d').notnull()]["Right Center Back"].str.slice(0, 2)
df["Right Center Back"] = pd.to_numeric(df["Right Center Back"])
df["Right Back"] = df[df["Right Back"].str.contains('\d+\+\d').notnull()]["Right Back"].str.slice(0, 2)
df["Right Back"] = pd.to_numeric(df["Right Back"])

"""Data for Weight is listed in lbs - rather than treat it as a string, we want a number, so we're going to strip lbs and change the data type to numeric."""

df['Weight'] = pd.to_numeric(df[df['Weight'].notnull()]['Weight'].map(lambda x : x.rstrip('lbs')))

"""Similarly, Height is listed in feet and inches, so we're converting it into one number which is just the player's height in inches"""

df['Height'] = pd.to_numeric(df[df['Height'].notnull()]['Height'].map(lambda x : int(x.split('\'')[0])*12 + int(x.split('\'')[1])))

"""Continuing with numeric conversions, we're extracting Work Rate into two columns, since the initial column is storing two values in one column.
We're then converting it to a numeric scale (with three potential values representing each class, "Low,", "Medium", and "High") for modeling.
"""

df['WorkRate1'] = df[df['Work Rate'].notnull()]['Work Rate'].map(lambda x : x.split('/ ')[0])
df['WorkRate2'] = df[df['Work Rate'].notnull()]['Work Rate'].map(lambda x : x.split('/ ')[1])

df['WorkRate1'] = pd.to_numeric(df[df['WorkRate1'].notnull()]['WorkRate1'].map(lambda x : 0 if x == 'Low' else 1 if x == 'Medium' else 2))
df['WorkRate2'] = pd.to_numeric(df[df['WorkRate2'].notnull()]['WorkRate2'].map(lambda x : 0 if x == 'Low' else 1 if x == 'Medium' else 2))

"""Here we strip the pound symbol from data related to money, and the letter indicating thousands (K), or millions (M) is traded for the actual number of 0's for a numeric representation rather than that of a string."""

df['Value'] = df[df['Value'].notnull()]['Value'].map(lambda x : x[1:])
df['Release Clause'] = df[df['Release Clause'].notnull()]['Release Clause'].map(lambda x : x[1:])
df['Wage'] = pd.to_numeric(df[df['Wage'].notnull()]['Wage'].map(lambda x : (int(x[1:-1]) * 1000) if len(x) > 2 else 0))

df['Value'] = pd.to_numeric(df[df['Value'].notnull()]['Value'].map(lambda x : (decimal.Decimal(x[:-1]) * 1000000) if x[-1] == 'M' else (decimal.Decimal(x[:-1]) * 1000) if x[-1] == 'K' else 0))
df['Release Clause'] = pd.to_numeric(df[df['Release Clause'].notnull()]['Release Clause'].map(lambda x : (decimal.Decimal(x[:-1]) * 1000000) if x[-1] == 'M' else (decimal.Decimal(x[:-1]) * 1000) if x[-1] == 'K' else 0))

"""We're filling null values based on what we feel is appropriate here - largely using what we observe to be reasonable default values, or using some method of filling the value (such as the mean)"""

# More filtering
df["Preferred Foot"].fillna("Left", inplace = True)
df["International Reputation"].fillna(int(df["International Reputation"].mean()), inplace = True)
df["Weak Foot"].fillna(int(df["Weak Foot"].mean()), inplace = True)
df["Skill Moves"].fillna(int(df["Skill Moves"].mean()), inplace = True)
df["Work Rate"].fillna("Medium/ Medium", inplace = True)
df["Body Type"].fillna("Normal", inplace = True)
df["Real Face"].fillna("No", inplace = True)
df["Position"].fillna("RS", inplace = True)
df["WorkRate1"].fillna(int(df["WorkRate1"].mean()), inplace = True)
df["WorkRate2"].fillna(int(df["WorkRate2"].mean()), inplace = True)
df["Composure"].fillna(int(df["Composure"].mean()), inplace = True)
df["Weight"].fillna(df["Weight"].mean(), inplace = True)
df["Contract Valid Until"].fillna("Unknown", inplace = True)
df["Club"].fillna("Unknown", inplace = True)
df["Preferred Foot"].fillna("Left", inplace = True)
df["Height"].fillna(df["Weight"].mean(), inplace = True)
df["Joined"].fillna("Jul,", inplace = True)
df["Loaned From"].fillna("None", inplace = True)
df["Jersey Number"].fillna(0, inplace = True)
df["Release Clause"].fillna(df["Release Clause"].mean(), inplace = True)
df["Stats Addtion"].fillna(int(df["Stats Addtion"].mean()), inplace = True)

"""Here we notice theres some invalid values in Body Type and fixing these."""

# print different body types and fix them based on general knowledge
df["Body Type"].value_counts(dropna=False)

# Players invalid data - taken from one kernel above
df["Body Type"].fillna("Normal", inplace = True)
df["Body Type"].replace("Messi", "Lean", inplace = True)
df["Body Type"].replace("C. Ronaldo", "Stocky", inplace = True)
df["Body Type"].replace("Courtois", "Stocky", inplace = True)
df["Body Type"].replace("PLAYER_BODY_TYPE_25", "Normal", inplace = True)
df["Body Type"].replace("Shaqiri", "Stocky", inplace = True)
df["Body Type"].replace("Neymar", "Lean", inplace = True)
df["Body Type"].replace("Akinfenwa", "Stocky",inplace = True)

# check the values again... looks awesome!
df["Body Type"].value_counts(dropna=False)

"""Here we add additional columns with binary values determined by the Work Rate clas, for the purpose of potential modeling."""

df['WorkRate1Low'] = pd.to_numeric(df[df['WorkRate1'].notnull()]['WorkRate1'].map(lambda x : 1 if x == 0.0 else 0))
df['WorkRate1Medium'] = pd.to_numeric(df[df['WorkRate1'].notnull()]['WorkRate1'].map(lambda x : 1 if x == 1.0 else 0))
df['WorkRate1High'] = pd.to_numeric(df[df['WorkRate1'].notnull()]['WorkRate1'].map(lambda x : 1 if x == 2.0 else 0))
df['WorkRate2Low'] = pd.to_numeric(df[df['WorkRate2'].notnull()]['WorkRate2'].map(lambda x : 1 if x == 0.0 else 0))
df['WorkRate2Medium'] = pd.to_numeric(df[df['WorkRate2'].notnull()]['WorkRate2'].map(lambda x : 1 if x == 1.0 else 0))
df['WorkRate2High'] = pd.to_numeric(df[df['WorkRate2'].notnull()]['WorkRate2'].map(lambda x : 1 if x == 2.0 else 0))

"""We noticed that a large number of player position's were redundant (Left Striker, Striker, Right Striker are all the same value, for example).
Here we collapse the redundant columns into singular columns.
"""

#Collapse Positional Columns To Single Column
df = df.drop('Left Striker', axis=1)
df = df.drop('Right Striker', axis = 1)
df = df.drop('Left Winger', axis = 1)
df = df.rename(columns={'Right Winger' : 'Winger'})
df = df.drop('Left Forward', axis = 1)
df = df.drop('Right Forward', axis = 1)
df = df.rename(columns={'Center Forward' : 'Forward'})
df = df.drop('Left Midfielder', axis = 1)
df = df.rename(columns={'Right Midfielder' : 'Side Midfielder'})
df = df.drop('Left Center Midfielder', axis = 1)
df = df.drop('Right Center Midfielder', axis = 1)
df = df.drop('Left Attacking Midfielder', axis = 1)
df = df.drop('Right Attacking Midfielder', axis = 1)
df = df.rename(columns={'Center Attacking Midfielder' : 'Attacking Midfielder'})
df = df.drop('Left Wing Back', axis=1)
df = df.rename(columns={'Right Wing Back' : 'Wing Back'})
df = df.drop('Left Defensive Midfielder', axis=1)
df = df.drop('Right Defensive Midfielder', axis=1)
df = df.rename(columns={'Center Defensive Midfielder' : 'Defensive Midfielder'})
df = df.drop('Left Back', axis=1)
df = df.rename(columns={'Right Back' : 'Side Back'})
df = df.drop('Left Center Back', axis=1)
df = df.drop('Right Center Back', axis=1)

"""We perform interpolation to fill the rest of our data set based on the data we have manually cleaned and filled."""

df = df.interpolate(method ='linear', limit_direction ='forward')

df.isnull().sum()

"""Goalkeepers accounted for a large number of our null values - they had no player statistics listed for each goalkeeper. So here we can view the impact interpolation had on the missing goalkeeper values."""

df[df["Position"] == "GK"]

"""# Data Visualization

## Player Statistics

### Top Players (Determined By Overall, then Total Score)
"""

TopPlayers = df.sort_values(by=['Overall', 'Total Stats'], ascending=False)
HTML(TopPlayers.head().to_html(escape=0, formatters={"Photo":path_to_image_html, "Flag":path_to_image_html, "Club Logo":path_to_image_html}))

"""### Worst Players (Determined by Overall, then Total Score)"""

BottomPlayers = df.sort_values(by=['Overall', 'Total Stats'], ascending=True)
HTML(BottomPlayers.head().to_html(escape=0, formatters={"Photo":path_to_image_html, "Flag":path_to_image_html, "Club Logo":path_to_image_html}))

"""### Predicting Player Stats Using Supplied Information"""

# Give us your info:
Name = "CardinalCon Man"
Age = 25
Nationality = "Brazil"
PreferredFoot = "Right"
Position = "ST"
Height = 72.0
Weight = 185
Club = "FC Barcelona"
BodyType = "Lean"
JerseyNumber = 10.0
rowToAdd = {
    "Unnamed: 0": 11111,
    "ID": 11111,
    "Name": Name,
    "Age": Age,
    "Nationality": Nationality,
    "Club": Club,
    "Preferred Foot": PreferredFoot,
    "Work Rate": "Medium\\/ Medium",
    "Body Type": BodyType,
    "Position": Position,
    "Jersey Number": JerseyNumber,
    "Joined": "Jul 1, 2004",
    "Loaned From": "None",
    "Contract Valid Until": "2021",
    "Height": Height,
    "Weight": Weight
}
dfCopy = df
dfCopy = dfCopy.append(rowToAdd , ignore_index=True)
dfCopy = dfCopy.interpolate(method ='linear', limit_direction ='forward')
dfCopy.loc[dfCopy["Name"] == "CardinalCon Man"]

"""##Heatmaps

###Heatmap of Full Dataset
"""

plt.rcParams['figure.figsize']=(35,35)
hm=sns.heatmap(df[['Name',	'Age',	'Photo',	'Nationality',	'Flag',	'Overall',	'Potential',	'Club',	'Club Logo',	'Value',	'Wage',	'Total Stats',	'Preferred Foot',	'International Reputation',	'Weak Foot',	'Skill Moves',	'Work Rate',	'Body Type',	'Real Face',	'Position',	'Jersey Number',	'Joined',	'Loaned From',	'Contract Valid Until',	'Height',	'Weight',	'Striker',	'Forward',	'Winger',	'Attacking Midfielder',	'Side Midfielder',	'Center Midfielder',	'Defensive Midfielder',	'Wing Back',	'Side Back',	'Center Back',	'Crossing',	'Finishing',	'HeadingAccuracy',	'ShortPassing',	'Volleys',	'Dribbling',	'Curve',	'FKAccuracy',	'LongPassing',	'BallControl',	'Acceleration',	'SprintSpeed',	'Agility',	'Reactions',	'Balance',	'ShotPower',	'Jumping',	'Stamina',	'Strength',	'LongShots',	'Aggression',	'Interceptions',	'Positioning',	'Vision',	'Penalties',	'Composure',	'Marking',	'StandingTackle',	'SlidingTackle',	'GKDiving',	'GKHandling',	'GKKicking',	'GKPositioning',	'GKReflexes',	'Release Clause', 'WorkRate1', 'WorkRate2', 'WorkRate1Low', 'WorkRate1Medium', 'WorkRate1High', 'WorkRate2Low', 'WorkRate2Medium', 'WorkRate2High'
                 ]].corr(), annot = True, annot_kws={"size": 9}, linewidths=1, linecolor="black", fmt='.2f', cmap='Blues')
hm.set_title(label='Heatmap of Full dataset', fontsize=20)

"""### Heatmap of Positional Dataset"""

plt.rcParams['figure.figsize']=(15,15)
hm=sns.heatmap(df[['Striker',	'Forward',	'Winger',	'Attacking Midfielder',	'Side Midfielder',	'Center Midfielder',	'Defensive Midfielder',	'Wing Back',	'Side Back',	'Center Back'
                 ]].corr(), annot = True, annot_kws={"size": 10}, linewidths=1, linecolor="black", fmt='.2f', cmap='Reds')
hm.set_title(label='Heatmap of Positional dataset', fontsize=20)

"""### Heatmap of Non-Positional Dataset"""

plt.rcParams['figure.figsize']=(25,25)
hm=sns.heatmap(df[['Name',	'Age',	'Photo',	'Nationality',	'Flag',	'Overall',	'Potential',	'Club',	'Club Logo',	'Value',	'Wage',	'Total Stats',	'Preferred Foot',	'International Reputation',	'Weak Foot',	'Skill Moves',	'Work Rate',	'Body Type',	'Real Face',	'Position',	'Jersey Number',	'Joined',	'Loaned From',	'Contract Valid Until',	'Height',	'Weight',	'Crossing',	'Finishing',	'HeadingAccuracy',	'ShortPassing',	'Volleys',	'Dribbling',	'Curve',	'FKAccuracy',	'LongPassing',	'BallControl',	'Acceleration',	'SprintSpeed',	'Agility',	'Reactions',	'Balance',	'ShotPower',	'Jumping',	'Stamina',	'Strength',	'LongShots',	'Aggression',	'Interceptions',	'Positioning',	'Vision',	'Penalties',	'Composure',	'Marking',	'StandingTackle',	'SlidingTackle',	'GKDiving',	'GKHandling',	'GKKicking',	'GKPositioning',	'GKReflexes',	'Release Clause', 'WorkRate1', 'WorkRate2', 'WorkRate1Low', 'WorkRate1Medium', 'WorkRate1High', 'WorkRate2Low', 'WorkRate2Medium', 'WorkRate2High'
                 ]].corr(), annot = True, annot_kws={"size": 10}, linewidths=1, linecolor="black", fmt='.2f', cmap='Greens')
hm.set_title(label='Heatmap of Non-Positional dataset', fontsize=20)

"""## Graphing Visualization

### Linear Model Plot (Player Nationality to Total Pay)
"""

tempchart = df.groupby(['Nationality'])['Value'].sum().sort_values(ascending = False).reset_index(name="Sum").reindex(columns=['Nationality', 'Sum'])
tempchart
plt.rcParams['figure.figsize']=(50,50)
plt.xlabel('Nationality', fontsize=20)
plt.ylabel('Total Paid', fontsize=20)
plt.title('Nationality vs Total Pay', fontsize = 25)
sns.set_context(rc={"font.size":3,"axes.titlesize":3,"axes.labelsize":3}) 
sns.barplot(x='Sum', y='Nationality', data=tempchart.sort_values('Sum'),alpha=0.6)

"""### Violin Plot (Age to Overall)"""

plt.rcParams['figure.figsize']=(20,20)
hm=sns.violinplot(x="Age",y="Overall", data=df)